name: deploy specific commit to dev

on:
  workflow_dispatch:
    inputs:
      commitHash:
        description: 'SHA of the commit to deploy'
        required: true

env:
  APP: spleis-testdata
  TEAM: tbd
  IMAGE: docker.pkg.github.com/${{ github.repository }}/spleis-testdata

jobs:
  set_version:
    runs-on: ubuntu-latest
    steps:
      - name: create docker tag
        run: echo "TAG=$(echo ${{ github.event.inputs.commitHash }} | cut -c1-7)" >> $GITHUB_ENV
    outputs:
      tag: ${{ env.TAG }}

  build:
    runs-on: ubuntu-latest
    needs: set_version
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v1
        with:
          ref: ${{ needs.set_version.outputs.tag }}
      - uses: actions/setup-java@v1
        with:
          java-version: '17.x'
      - uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Build backend
        run: ./gradlew test build
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache node deps
        id: cache-node
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Set timezone
        run: export TZ=utc

      - name: Install dependencies
        run: npm --prefix frontend ci

      - name: Build frontend
        run: npm --prefix frontend run build

      - name: Build docker image
        run: docker build . --pull -t ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}

      - name: Push docker image
        run: |
          echo "$GITHUB_TOKEN" | docker login --username "$GITHUB_REPOSITORY" --password-stdin https://docker.pkg.github.com
          docker push ${{ env.IMAGE }}:${{ needs.set_version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to dev
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: deploy/dev.yml
          WAIT: false
          VAR: "image=${{env.IMAGE}}:${{ needs.set_version.outputs.tag }},team=${{env.TEAM}},app=${{env.APP}}"
